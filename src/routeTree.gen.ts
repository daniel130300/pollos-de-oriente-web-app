/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NoauthImport } from './routes/_no_auth'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const NoauthSigninLazyImport = createFileRoute('/_no_auth/signin')()
const NoauthResetPasswordLazyImport = createFileRoute(
  '/_no_auth/reset-password',
)()
const AuthProductsIndexLazyImport = createFileRoute('/_auth/products/')()
const AuthCombosIndexLazyImport = createFileRoute('/_auth/combos/')()
const AuthProfileUpdatePasswordLazyImport = createFileRoute(
  '/_auth/profile/update-password',
)()
const AuthProductsAddProductLazyImport = createFileRoute(
  '/_auth/products/add-product',
)()
const AuthProductsIdLazyImport = createFileRoute('/_auth/products/$id')()
const AuthCombosAddComboLazyImport = createFileRoute(
  '/_auth/combos/add-combo',
)()
const AuthCombosIdLazyImport = createFileRoute('/_auth/combos/$id')()
const AuthExpensesCategoriesIndexLazyImport = createFileRoute(
  '/_auth/expenses/categories/',
)()
const AuthEstablishmentsStoresIndexLazyImport = createFileRoute(
  '/_auth/establishments/stores/',
)()
const AuthProductsIdEditLazyImport = createFileRoute(
  '/_auth/products/$id/edit',
)()
const AuthExpensesCategoriesAddCategoryLazyImport = createFileRoute(
  '/_auth/expenses/categories/add-category',
)()
const AuthExpensesCategoriesIdLazyImport = createFileRoute(
  '/_auth/expenses/categories/$id',
)()
const AuthEstablishmentsStoresAddStoreLazyImport = createFileRoute(
  '/_auth/establishments/stores/add-store',
)()
const AuthEstablishmentsStoresIdLazyImport = createFileRoute(
  '/_auth/establishments/stores/$id',
)()
const AuthCombosIdEditLazyImport = createFileRoute('/_auth/combos/$id/edit')()
const AuthExpensesCategoriesIdEditLazyImport = createFileRoute(
  '/_auth/expenses/categories/$id/edit',
)()
const AuthEstablishmentsStoresIdEditLazyImport = createFileRoute(
  '/_auth/establishments/stores/$id/edit',
)()

// Create/Update Routes

const NoauthRoute = NoauthImport.update({
  id: '/_no_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NoauthSigninLazyRoute = NoauthSigninLazyImport.update({
  path: '/signin',
  getParentRoute: () => NoauthRoute,
} as any).lazy(() =>
  import('./routes/_no_auth/signin.lazy').then((d) => d.Route),
)

const NoauthResetPasswordLazyRoute = NoauthResetPasswordLazyImport.update({
  path: '/reset-password',
  getParentRoute: () => NoauthRoute,
} as any).lazy(() =>
  import('./routes/_no_auth/reset-password.lazy').then((d) => d.Route),
)

const AuthProductsIndexLazyRoute = AuthProductsIndexLazyImport.update({
  path: '/products/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/products/index.lazy').then((d) => d.Route),
)

const AuthCombosIndexLazyRoute = AuthCombosIndexLazyImport.update({
  path: '/combos/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/combos/index.lazy').then((d) => d.Route),
)

const AuthProfileUpdatePasswordLazyRoute =
  AuthProfileUpdatePasswordLazyImport.update({
    path: '/profile/update-password',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/profile/update-password.lazy').then((d) => d.Route),
  )

const AuthProductsAddProductLazyRoute = AuthProductsAddProductLazyImport.update(
  {
    path: '/products/add-product',
    getParentRoute: () => AuthRoute,
  } as any,
).lazy(() =>
  import('./routes/_auth/products/add-product.lazy').then((d) => d.Route),
)

const AuthProductsIdLazyRoute = AuthProductsIdLazyImport.update({
  path: '/products/$id',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/products/$id.lazy').then((d) => d.Route),
)

const AuthCombosAddComboLazyRoute = AuthCombosAddComboLazyImport.update({
  path: '/combos/add-combo',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/combos/add-combo.lazy').then((d) => d.Route),
)

const AuthCombosIdLazyRoute = AuthCombosIdLazyImport.update({
  path: '/combos/$id',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/combos/$id.lazy').then((d) => d.Route),
)

const AuthExpensesCategoriesIndexLazyRoute =
  AuthExpensesCategoriesIndexLazyImport.update({
    path: '/expenses/categories/',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/expenses/categories/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthEstablishmentsStoresIndexLazyRoute =
  AuthEstablishmentsStoresIndexLazyImport.update({
    path: '/establishments/stores/',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/establishments/stores/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthProductsIdEditLazyRoute = AuthProductsIdEditLazyImport.update({
  path: '/products/$id/edit',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/products_/$id/edit.lazy').then((d) => d.Route),
)

const AuthExpensesCategoriesAddCategoryLazyRoute =
  AuthExpensesCategoriesAddCategoryLazyImport.update({
    path: '/expenses/categories/add-category',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/expenses/categories/add-category.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthExpensesCategoriesIdLazyRoute =
  AuthExpensesCategoriesIdLazyImport.update({
    path: '/expenses/categories/$id',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/expenses/categories/$id.lazy').then((d) => d.Route),
  )

const AuthEstablishmentsStoresAddStoreLazyRoute =
  AuthEstablishmentsStoresAddStoreLazyImport.update({
    path: '/establishments/stores/add-store',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/establishments/stores/add-store.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthEstablishmentsStoresIdLazyRoute =
  AuthEstablishmentsStoresIdLazyImport.update({
    path: '/establishments/stores/$id',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/establishments/stores/$id.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthCombosIdEditLazyRoute = AuthCombosIdEditLazyImport.update({
  path: '/combos/$id/edit',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/combos_/$id/edit.lazy').then((d) => d.Route),
)

const AuthExpensesCategoriesIdEditLazyRoute =
  AuthExpensesCategoriesIdEditLazyImport.update({
    path: '/expenses/categories/$id/edit',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/expenses_/categories_/$id/edit.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthEstablishmentsStoresIdEditLazyRoute =
  AuthEstablishmentsStoresIdEditLazyImport.update({
    path: '/establishments/stores/$id/edit',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/establishments_/stores_/$id/edit.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_no_auth': {
      preLoaderRoute: typeof NoauthImport
      parentRoute: typeof rootRoute
    }
    '/_no_auth/reset-password': {
      preLoaderRoute: typeof NoauthResetPasswordLazyImport
      parentRoute: typeof NoauthImport
    }
    '/_no_auth/signin': {
      preLoaderRoute: typeof NoauthSigninLazyImport
      parentRoute: typeof NoauthImport
    }
    '/_auth/combos/$id': {
      preLoaderRoute: typeof AuthCombosIdLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/combos/add-combo': {
      preLoaderRoute: typeof AuthCombosAddComboLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/products/$id': {
      preLoaderRoute: typeof AuthProductsIdLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/products/add-product': {
      preLoaderRoute: typeof AuthProductsAddProductLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/profile/update-password': {
      preLoaderRoute: typeof AuthProfileUpdatePasswordLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/combos/': {
      preLoaderRoute: typeof AuthCombosIndexLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/products/': {
      preLoaderRoute: typeof AuthProductsIndexLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/combos/$id/edit': {
      preLoaderRoute: typeof AuthCombosIdEditLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/establishments/stores/$id': {
      preLoaderRoute: typeof AuthEstablishmentsStoresIdLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/establishments/stores/add-store': {
      preLoaderRoute: typeof AuthEstablishmentsStoresAddStoreLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/expenses/categories/$id': {
      preLoaderRoute: typeof AuthExpensesCategoriesIdLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/expenses/categories/add-category': {
      preLoaderRoute: typeof AuthExpensesCategoriesAddCategoryLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/products/$id/edit': {
      preLoaderRoute: typeof AuthProductsIdEditLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/establishments/stores/': {
      preLoaderRoute: typeof AuthEstablishmentsStoresIndexLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/expenses/categories/': {
      preLoaderRoute: typeof AuthExpensesCategoriesIndexLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/establishments/stores/$id/edit': {
      preLoaderRoute: typeof AuthEstablishmentsStoresIdEditLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/expenses/categories/$id/edit': {
      preLoaderRoute: typeof AuthExpensesCategoriesIdEditLazyImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AuthRoute.addChildren([
    AuthCombosIdLazyRoute,
    AuthCombosAddComboLazyRoute,
    AuthProductsIdLazyRoute,
    AuthProductsAddProductLazyRoute,
    AuthProfileUpdatePasswordLazyRoute,
    AuthCombosIndexLazyRoute,
    AuthProductsIndexLazyRoute,
    AuthCombosIdEditLazyRoute,
    AuthEstablishmentsStoresIdLazyRoute,
    AuthEstablishmentsStoresAddStoreLazyRoute,
    AuthExpensesCategoriesIdLazyRoute,
    AuthExpensesCategoriesAddCategoryLazyRoute,
    AuthProductsIdEditLazyRoute,
    AuthEstablishmentsStoresIndexLazyRoute,
    AuthExpensesCategoriesIndexLazyRoute,
    AuthEstablishmentsStoresIdEditLazyRoute,
    AuthExpensesCategoriesIdEditLazyRoute,
  ]),
  NoauthRoute.addChildren([
    NoauthResetPasswordLazyRoute,
    NoauthSigninLazyRoute,
  ]),
])

/* prettier-ignore-end */
